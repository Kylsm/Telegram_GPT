import os
from openai import OpenAI
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv

# ØªØ­Ù…ÙŠÙ„ Ø§Ù„Ù…ØªØºÙŠØ±Ø§Øª Ù…Ù† .env
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# ØªÙ‡ÙŠØ¦Ø© Ø¹Ù…ÙŠÙ„ OpenAI Ø§Ù„Ø¬Ø¯ÙŠØ¯
client = OpenAI(api_key=OPENAI_API_KEY)

# Ø£Ù…Ø± /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Ù‡Ù„Ø§! Ø£Ø±Ø³Ù„ Ù„ÙŠ Ø£ÙŠ Ø´ÙŠØ¡ØŒ ÙˆØ£Ù†Ø§ Ø¨Ø±Ø¯ Ø¹Ù„ÙŠÙƒ Ø¨Ø§Ø³ØªØ®Ø¯Ø§Ù… GPT ðŸ¤–")

# Ø§Ù„Ø±Ø¯ Ø¹Ù„Ù‰ Ø§Ù„Ø±Ø³Ø§Ø¦Ù„
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": user_message}]
        )
        bot_reply = response.choices[0].message.content
    except Exception as e:
        bot_reply = f"ØµØ§Ø± Ø®Ø·Ø£: {e}"
    await update.message.reply_text(bot_reply)

# ØªØ´ØºÙŠÙ„ Ø§Ù„Ø¨ÙˆØª
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.run_polling()
